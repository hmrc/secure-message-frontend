# microservice specific routes
->          /hmrc-frontend                                                     hmrcfrontend.Routes

GET         /:clientService/messages                                           controllers.MessagesInboxController.display(clientService: String, enrolmentKey: Option[List[String]], enrolment: Option[List[CustomerEnrolment]], tag: Option[List[Tag]])

GET         /messages/count                                                    controllers.ApiController.count(enrolmentKey: Option[List[String]], enrolment: Option[List[CustomerEnrolment]], tag: Option[List[Tag]])

GET         /:clientService/messages/:id                                       controllers.MessageController.displayMessage(clientService, id, showReplyForm: Boolean ?= false)

+ nocsrf
POST        /:clientService/messages/:id                                       controllers.MessageController.saveReplyMessage(clientService, id)

GET         /:clientService/messages/result                                    controllers.MessageController.displayResult(clientService)


###legeacy endpoints
GET         /:clientService/conversation/:client/:conversationId               controllers.MessageController.display(clientService, client, conversationId, showReplyForm: Boolean ?= false)

+ nocsrf
POST        /:clientService/conversation/:client/:conversationId               controllers.MessageController.saveReply(clientService, client, conversationId)


GET         /:clientService/conversation/:client/:conversationId/result        controllers.MessageController.result(clientService, client, conversationId)



### NoDocs ###
GET         /language/:lang                                                    controllers.LanguageSwitchController.selectLanguage(lang: Language)

### NoDocs ###
GET         /assets/*file                                                      controllers.Assets.versioned(path = "/public", file: Asset)


GET   /messages                                     controllers.MessageFrontEndController.list(taxIdentifiers: List[String], regimes: List[String])
GET   /messages/bta                                 controllers.MessageFrontEndController.btaList(taxIdentifiers: List[String], regimes: List[String])

GET   /messages/message-count                       controllers.MessageFrontEndController.count(read: Option[model.ReadPreference.Value], taxIdentifiers: List[String], regimes: List[String])

GET   /messages/inbox-link                          controllers.MessageFrontEndController.inboxLink(messagesInboxUrl: String, taxIdentifiers: List[String], regimes: List[String])
GET   /messages/:encryptedUrl                       controllers.MessageFrontEndController.read(encryptedUrl: controllers.Encrypted[controllers.ParameterisedUrl])